@page "/"
@using Nuotti.Contracts.V1.Model
@inject SessionSelectionService SessionSvc
@inject PerformerUiState LiveState

<h1>Nuotti Performer</h1>

@if (SessionSvc.State == UiState.Select)
{
    <p>Select an existing session or create a new one for the show.</p>

    <div class="mb-3">
        <label class="form-label">Backend URL</label>
        <input class="form-control" @bind-value="backendUrl" @bind-value:event="oninput" placeholder="http://localhost:5000" />
    </div>

    @if (!string.IsNullOrWhiteSpace(SessionSvc.LastSessionCode))
    {
        <div class="mb-2">
            <label class="form-label">Session picker</label>
            <select class="form-select" @onchange="(e => sessionCode = e.Value?.ToString())">
                <option value="">-- choose --</option>
                <option value="@SessionSvc.LastSessionCode">Last: @SessionSvc.LastSessionCode</option>
            </select>
        </div>
    }

    <div class="mb-3">
        <label class="form-label">Or enter session code</label>
        <input class="form-control" @bind-value="sessionCode" @bind-value:event="oninput" placeholder="e.g. ABC123" />
    </div>

    <div class="d-flex gap-2 mb-3">
        <button class="btn btn-primary" @onclick="CreateSessionAsync" disabled="@isBusy">Create session</button>
        <button class="btn btn-success" @onclick="ConnectAsync" disabled="@isBusy || string.IsNullOrWhiteSpace(sessionCode) || string.IsNullOrWhiteSpace(backendUrl)">Use selected / Connect</button>
    </div>
}
else
{
    <h3>Control</h3>
    <p>Session: <strong>@(sessionCode ?? SessionSvc.LastSessionCode)</strong></p>

    <div class="d-flex gap-2 mb-3">
        <button class="btn btn-success" @onclick="ConnectAsync" disabled="@isBusy || string.IsNullOrWhiteSpace(sessionCode ?? SessionSvc.LastSessionCode) || string.IsNullOrWhiteSpace(backendUrl)">Connect</button>
        <button class="btn btn-warning" @onclick="DisconnectAsync" disabled="@(!isConnected)">Disconnect</button>
    </div>

    <ControlPanel />
}

@if (!string.IsNullOrWhiteSpace(status))
{
    <div class="alert @(isConnected ? "alert-success" : "alert-secondary")">@status</div>
}

@code {
    string? backendUrl;
    string? sessionCode;

    bool isBusy;
    bool isConnected;
    string? status;

    PerformerClient? client;

    protected override void OnInitialized()
    {
        backendUrl = Environment.GetEnvironmentVariable("NUOTTI_BACKEND");
        sessionCode = Environment.GetEnvironmentVariable("NUOTTI_SESSION") ?? SessionSvc.LastSessionCode;
    }

    async Task CreateSessionAsync()
    {
        if (string.IsNullOrWhiteSpace(backendUrl))
        {
            status = "Please enter Backend URL first.";
            return;
        }
        try
        {
            isBusy = true;
            StateHasChanged();
            using var http = new HttpClient { BaseAddress = new Uri(backendUrl!, UriKind.Absolute) };
            sessionCode = await SessionSvc.CreateNewSessionAsync(http, sessionCode);
            status = $"Created session: {sessionCode}";
            // SessionSvc.State has switched to Control, UI will update accordingly
        }
        catch (Exception ex)
        {
            status = $"Failed to create session: {ex.Message}";
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task ConnectAsync()
    {
        if (string.IsNullOrWhiteSpace(backendUrl) || string.IsNullOrWhiteSpace(sessionCode))
        {
            status = "Enter Backend URL and Session code.";
            return;
        }

        try
        {
            isBusy = true;
            _ = client?.DisposeAsync().AsTask();
            var backendUri = new Uri(backendUrl!, UriKind.Absolute);
            client = new PerformerClient(backendUri, sessionCode!);
            client.ConnectedChanged += OnConnectedChanged;
            client.GameStateChanged += OnGameStateChanged;
            LiveState.SetSession(sessionCode!, backendUri);
            await client.EnsureConnectedAsync();
            // Refresh role counts once after connect
            _ = LiveState.RefreshCountsAsync();
            status = "Connected.";
            SessionSvc.SelectExistingSession(sessionCode!); // persist & switch view
        }
        catch (Exception ex)
        {
            status = $"Connection failed: {ex.Message}";
            isConnected = false;
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task DisconnectAsync()
    {
        if (client is null)
        {
            status = "Not connected.";
            return;
        }
        await client.DisconnectAsync();
        status = "Disconnected.";
    }

    void OnConnectedChanged(bool connected)
    {
        isConnected = connected;
        LiveState.SetConnection(connected);
        if (connected)
        {
            _ = LiveState.RefreshCountsAsync();
        }
        InvokeAsync(StateHasChanged);
    }

    void OnGameStateChanged(GameStateSnapshot snapshot)
    {
        LiveState.UpdateGameState(snapshot);
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (client is not null)
        {
            client.ConnectedChanged -= OnConnectedChanged;
            client.GameStateChanged -= OnGameStateChanged;
            await client.DisposeAsync();
        }
    }
}
