@using Microsoft.AspNetCore.Components.Routing
@using Nuotti.Contracts.V1
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject PerformerUiState State
@inject OfflineCommandQueue OfflineQueue
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar
@inject CommandHistoryService History
@inject KeyboardShortcutsService Keybd
@inject CommandPaletteService Palette

<div @onkeydown="OnKeyDown" @onkeydown:document="OnKeyDown">
    <MudThemeProvider @ref="@_mudThemeProvider" Theme="@_theme" IsDarkMode="@_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider Position="SnackbarPosition.BottomRight" MaxDisplayedSnackbars="5" PreventDuplicates="true" />

    <MudLayout>
    <MudAppBar Elevation="0" Dense="true" Style="backdrop-filter: blur(10px);">
        <MudIconButton Icon="@Material.Filled.Menu" 
                       Color="Color.Inherit" 
                       Edge="Edge.Start" 
                       OnClick="@ToggleDrawer"
                       Size="Size.Large" />
        <MudText Typo="Typo.h5" Style="font-weight: 700; margin-left: 12px;">
            🎵 Nuotti Performer
        </MudText>
        <MudSpacer />
        <LiveHeader />
        <MudTooltip Text="Show command history">
            <MudIconButton Icon="@Material.Filled.History"
                           Color="Color.Inherit"
                           OnClick="ToggleHistory"
                           Size="Size.Large"
                           Class="ml-2" />
        </MudTooltip>
        <MudTooltip Text="@(_isDarkMode ? "Switch to light mode" : "Switch to dark mode")">
            <MudIconButton Icon="@(_isDarkMode ? Material.Filled.LightMode : Material.Filled.DarkMode)" 
                           Color="Color.Inherit"
                           OnClick="ToggleTheme"
                           Size="Size.Large"
                           Class="ml-2" />
        </MudTooltip>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Docked">
        <MudDrawerHeader>
            <div>
                <MudText Typo="Typo.h5" Style="font-weight: 700;">🎵 Nuotti</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Performance Control</MudText>
            </div>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/" 
                        Match="NavLinkMatch.All" 
                        Icon="@Material.Filled.Dashboard">
                Dashboard
            </MudNavLink>
            <MudNavLink Href="/setlist" 
                        Match="NavLinkMatch.Prefix" 
                        Icon="@Material.Filled.QueueMusic">
                Setlist Manager
            </MudNavLink>
            <MudDivider Class="my-2" />
            <MudNavGroup Title="Settings" Icon="@Material.Filled.Settings" Expanded="false">
                <MudNavLink Icon="@Material.Filled.Info">About</MudNavLink>
                <MudNavLink Icon="@(_isDarkMode ? Material.Filled.LightMode : Material.Filled.DarkMode)" 
                            OnClick="ToggleTheme">
                    @(_isDarkMode ? "Light" : "Dark") Mode
                </MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>

    <MudDrawer Anchor="Anchor.Right" @bind-Open="_historyOpen" Elevation="2">
        <CommandHistoryDrawer />
    </MudDrawer>

    <MudMainContent Class="mt-2">
        @if (OfflineQueue.IsOffline && OfflineQueue.Count > 0)
        {
            <MudAlert Severity="Severity.Warning" Elevation="0" Dense="true" Class="mx-4 my-2">
                Offline – commands queued
            </MudAlert>
        }
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _historyOpen = false;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _theme = null!;
    private bool _isDarkMode;

    protected override void OnInitialized()
    {
        _theme = ThemeService.GetTheme();
        _isDarkMode = ThemeService.IsDarkMode;
        ThemeService.OnThemeChanged += OnThemeChanged;
        State.Changed += OnStateChanged;
        OfflineQueue.Changed += OnQueueChanged;
    }

    private void OnStateChanged()
    {
        // When connection is restored, attempt to flush queued commands
        if (State.Connected && OfflineQueue.IsOffline)
        {
            OfflineQueue.SetOffline(false);
            _ = FlushQueueAsync();
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnQueueChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task FlushQueueAsync()
    {
        if (State.BackendBaseUri is null) return;
        var http = HttpFactory.CreateClient();
        http.BaseAddress = State.BackendBaseUri;
        await OfflineQueue.FlushAsync(async (route, cmd) =>
        {
            var url = $"/v1/message/phase/{route}/{Uri.EscapeDataString(State.SessionCode!)}";
            return await http.PostAsJsonAsync(url, cmd, ContractsJson.RestOptions);
        },
        Snackbar,
        History);
    }

    private void OnThemeChanged()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleHistory()
    {
        _historyOpen = !_historyOpen;
    }

    private void ToggleTheme()
    {
        ThemeService.ToggleTheme();
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (Keybd.Suspended) return;
        var key = (e.Key ?? string.Empty).ToLowerInvariant();
        if (e.CtrlKey && key == "k")
        {
            Palette.Open();
            // Prevent further handling
        }
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
        State.Changed -= OnStateChanged;
        OfflineQueue.Changed -= OnQueueChanged;
    }
}
</div>
