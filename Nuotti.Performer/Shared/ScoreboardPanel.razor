@inject PerformerUiState State
@implements IDisposable

<MudPaper Elevation="2" Class="pa-4">
    <MudText Typo="Typo.h6" Class="mb-3">Scoreboard</MudText>

    @if (State.Scores.Count == 0)
    {
        <MudText Typo="Typo.body2">No scores yet.</MudText>
    }
    else
    {
        <table class="mud-table-root mud-table-dense" style="width:100%">
            <thead class="mud-table-head">
                <tr>
                    <th>Rank</th>
                    <th>Player</th>
                    <th class="text-right">Points</th>
                    <th class="text-right">Δ Last</th>
                </tr>
            </thead>
            <tbody>
            @{
                var rank = 0;
                foreach (var e in State.GetOrderedScoreboard(10))
                {
                    rank++;
                    <tr>
                        <td>@rank</td>
                        <td>@e.id</td>
                        <td class="text-right">@e.points</td>
                        <td class="text-right">
                            @if (e.delta > 0)
                            {
                                <span class="mud-primary-text">+@e.delta</span>
                            }
                            else if (e.delta < 0)
                            {
                                <span class="mud-error-text">@e.delta</span>
                            }
                            else
                            {
                                <span class="mud-secondary-text">0</span>
                            }
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
</MudPaper>

@code {
    protected override void OnInitialized()
    {
        State.Changed += OnStateChanged;
    }

    void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.Changed -= OnStateChanged;
    }
}
