name: Build and Push (native per-arch, fast)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/sifterstudios/nuotti
  # Build only amd64 on PRs for speed
  BUILD_ARM_ON_PR: "false"

jobs:
  build-amd64:
    # Your current runner; add label "amd64" in compose (see section 2)
    runs-on: [self-hosted, unraid, docker, amd64]
    if: github.event_name != 'pull_request' || env.BUILD_ARM_ON_PR == 'true'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: backend
            context: .
            dockerfile: Nuotti.Backend/Dockerfile
            image: backend
          - service: audience
            context: .
            dockerfile: Nuotti.Audience/Dockerfile
            image: audience
          - service: web
            context: web
            dockerfile: web/Dockerfile
            image: web
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          cleanup: false
          driver-opts: |
            image=moby/buildkit:v0.13.2

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags/labels) with -amd64 suffix
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
          flavor: |
            suffix=-amd64,onlatest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push (native amd64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          # native arch â†’ don't set platforms
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/runner/_work/buildx-cache
          cache-to: type=local,dest=/runner/_work/buildx-cache,mode=max

  build-arm64:
    # Second machine: ARM64 runner; add label "arm64" (see section 3)
    runs-on: [self-hosted, docker, arm64]
    if: github.event_name != 'pull_request'  # skip on PRs for speed
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: backend
            context: .
            dockerfile: Nuotti.Backend/Dockerfile
            image: backend
          - service: audience
            context: .
            dockerfile: Nuotti.Audience/Dockerfile
            image: audience
          - service: web
            context: web
            dockerfile: web/Dockerfile
            image: web
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          cleanup: false
          driver-opts: |
            image=moby/buildkit:v0.13.2

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags/labels) with -arm64 suffix
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
          flavor: |
            suffix=-arm64,onlatest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push (native arm64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/runner/_work/buildx-cache
          cache-to: type=local,dest=/runner/_work/buildx-cache,mode=max

  merge-manifests:
    name: Create multi-arch manifests
    needs: [build-amd64, build-arm64]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - image: backend
          - image: audience
          - image: web
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags (no suffix)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Merge amd64+arm64 into multi-arch
        run: |
          set -euo pipefail
          echo "${{ steps.meta.outputs.tags }}" | while read -r TAG; do
            [ -z "$TAG" ] && continue
            docker buildx imagetools create \
              -t "$TAG" \
              "${TAG}-amd64" \
              "${TAG}-arm64"
          done
