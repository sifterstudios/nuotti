@page "/"
@using Nuotti.Audience.Services
@inject AudienceHubClient Hub
@inject NavigationManager Nav

<PageTitle>Join session</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Join a session</MudText>

    <MudTextField @bind-Value="session" 
                  Label="Session code" 
                  Placeholder="e.g. ABC123symotion-prefix)"
                  Variant="Variant.Outlined"
                  Margin="Margin.Normal"
                  FullWidth="true" />

    <MudTextField @bind-Value="name" 
                  Label="Your name (optional)"
                  Placeholder="Jane"
                  Variant="Variant.Outlined"
                  Margin="Margin.Normal"
                  FullWidth="true" />

    <MudButton Variant="Variant.Filled" 
               Color="Color.Primary" 
               Size="Size.Large"
               FullWidth="true"
               OnClick="JoinAsync" 
               Disabled="@(isBusy || string.IsNullOrWhiteSpace(session))"
               Class="mt-4">
        @(isBusy ? "Joining..." : "Join")
    </MudButton>

    @if (!string.IsNullOrWhiteSpace(error))
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">@error</MudAlert>
    }

    <MudText Typo="Typo.caption" Class="mt-4" Color="Color.Secondary">
        Backend: @Hub.BackendBaseUrl
    </MudText>
</MudContainer>

@code {
    private string session = string.Empty;
    private string? name;
    private bool isBusy;
    private string? error;

    protected override void OnInitialized()
    {
        Hub.QuestionPushed += OnQuestion;
    }

    private void OnQuestion(Nuotti.Contracts.QuestionPushed q)
    {
        // Navigate to question screen when a question is pushed
        Nav.NavigateTo("/question");
    }

    private async Task JoinAsync()
    {
        error = null;
        isBusy = true;
        try
        {
            await Hub.CreateOrJoinAsync(session.Trim(), string.IsNullOrWhiteSpace(name) ? null : name!.Trim());
            // Navigate to the question page (which also serves as a waiting room) once connected/joined
            Nav.NavigateTo("/question");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isBusy = false;
        }
    }
}